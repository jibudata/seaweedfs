// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: v1/storage.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UDMStorageClient is the client API for UDMStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UDMStorageClient interface {
	UploadFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (UDMStorage_UploadFileClient, error)
	DownloadFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (UDMStorage_DownloadFileClient, error)
	CacheFile(ctx context.Context, in *FileKey, opts ...grpc.CallOption) (*CacheFileReply, error)
	DeleteFile(ctx context.Context, in *FileKey, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type uDMStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewUDMStorageClient(cc grpc.ClientConnInterface) UDMStorageClient {
	return &uDMStorageClient{cc}
}

func (c *uDMStorageClient) UploadFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (UDMStorage_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &UDMStorage_ServiceDesc.Streams[0], "/storage.v1.UDMStorage/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &uDMStorageUploadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UDMStorage_UploadFileClient interface {
	Recv() (*FileInfo, error)
	grpc.ClientStream
}

type uDMStorageUploadFileClient struct {
	grpc.ClientStream
}

func (x *uDMStorageUploadFileClient) Recv() (*FileInfo, error) {
	m := new(FileInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uDMStorageClient) DownloadFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (UDMStorage_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &UDMStorage_ServiceDesc.Streams[1], "/storage.v1.UDMStorage/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &uDMStorageDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UDMStorage_DownloadFileClient interface {
	Recv() (*FileInfo, error)
	grpc.ClientStream
}

type uDMStorageDownloadFileClient struct {
	grpc.ClientStream
}

func (x *uDMStorageDownloadFileClient) Recv() (*FileInfo, error) {
	m := new(FileInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uDMStorageClient) CacheFile(ctx context.Context, in *FileKey, opts ...grpc.CallOption) (*CacheFileReply, error) {
	out := new(CacheFileReply)
	err := c.cc.Invoke(ctx, "/storage.v1.UDMStorage/CacheFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uDMStorageClient) DeleteFile(ctx context.Context, in *FileKey, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/storage.v1.UDMStorage/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UDMStorageServer is the server API for UDMStorage service.
// All implementations must embed UnimplementedUDMStorageServer
// for forward compatibility
type UDMStorageServer interface {
	UploadFile(*FileRequest, UDMStorage_UploadFileServer) error
	DownloadFile(*FileRequest, UDMStorage_DownloadFileServer) error
	CacheFile(context.Context, *FileKey) (*CacheFileReply, error)
	DeleteFile(context.Context, *FileKey) (*emptypb.Empty, error)
	mustEmbedUnimplementedUDMStorageServer()
}

// UnimplementedUDMStorageServer must be embedded to have forward compatible implementations.
type UnimplementedUDMStorageServer struct {
}

func (UnimplementedUDMStorageServer) UploadFile(*FileRequest, UDMStorage_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedUDMStorageServer) DownloadFile(*FileRequest, UDMStorage_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedUDMStorageServer) CacheFile(context.Context, *FileKey) (*CacheFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheFile not implemented")
}
func (UnimplementedUDMStorageServer) DeleteFile(context.Context, *FileKey) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedUDMStorageServer) mustEmbedUnimplementedUDMStorageServer() {}

// UnsafeUDMStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UDMStorageServer will
// result in compilation errors.
type UnsafeUDMStorageServer interface {
	mustEmbedUnimplementedUDMStorageServer()
}

func RegisterUDMStorageServer(s grpc.ServiceRegistrar, srv UDMStorageServer) {
	s.RegisterService(&UDMStorage_ServiceDesc, srv)
}

func _UDMStorage_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UDMStorageServer).UploadFile(m, &uDMStorageUploadFileServer{stream})
}

type UDMStorage_UploadFileServer interface {
	Send(*FileInfo) error
	grpc.ServerStream
}

type uDMStorageUploadFileServer struct {
	grpc.ServerStream
}

func (x *uDMStorageUploadFileServer) Send(m *FileInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _UDMStorage_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UDMStorageServer).DownloadFile(m, &uDMStorageDownloadFileServer{stream})
}

type UDMStorage_DownloadFileServer interface {
	Send(*FileInfo) error
	grpc.ServerStream
}

type uDMStorageDownloadFileServer struct {
	grpc.ServerStream
}

func (x *uDMStorageDownloadFileServer) Send(m *FileInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _UDMStorage_CacheFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UDMStorageServer).CacheFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.v1.UDMStorage/CacheFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UDMStorageServer).CacheFile(ctx, req.(*FileKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _UDMStorage_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UDMStorageServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.v1.UDMStorage/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UDMStorageServer).DeleteFile(ctx, req.(*FileKey))
	}
	return interceptor(ctx, in, info, handler)
}

// UDMStorage_ServiceDesc is the grpc.ServiceDesc for UDMStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UDMStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage.v1.UDMStorage",
	HandlerType: (*UDMStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CacheFile",
			Handler:    _UDMStorage_CacheFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _UDMStorage_DeleteFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _UDMStorage_UploadFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _UDMStorage_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/storage.proto",
}
